// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	commentFieldNames          = builder.RawFieldNames(&Comment{}, true)
	commentRows                = strings.Join(commentFieldNames, ",")
	commentRowsExpectAutoSet   = strings.Join(stringx.Remove(commentFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	commentRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(commentFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))

	cachePublicCommentIdPrefix       = "cache:public:comment:id:"
	cachePublicCommentBlogUuidPrefix = "cache:public:comment:blogUuid:"
	cachePublicCommentPostUuidPrefix = "cache:public:comment:postUuid:"
	cachePublicCommentUuidPrefix     = "cache:public:comment:uuid:"
)

type (
	commentModel interface {
		Insert(ctx context.Context, data *Comment) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Comment, error)
		FindOneByBlogUuid(ctx context.Context, blogUuid string) (*Comment, error)
		FindOneByPostUuid(ctx context.Context, postUuid string) (*Comment, error)
		FindOneByUuid(ctx context.Context, uuid string) (*Comment, error)
		Update(ctx context.Context, data *Comment) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCommentModel struct {
		sqlc.CachedConn
		table string
	}

	Comment struct {
		Id        int64          `db:"id"`
		Uuid      string         `db:"uuid"`
		BlogUuid  string         `db:"blog_uuid"`
		PostUuid  string         `db:"post_uuid"`
		Status    sql.NullString `db:"status"`
		Published sql.NullTime   `db:"published"`
		Updated   sql.NullTime   `db:"updated"`
		Selflink  sql.NullString `db:"selflink"`
		Content   sql.NullString `db:"content"`
	}
)

func newCommentModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultCommentModel {
	return &defaultCommentModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."comment"`,
	}
}

func (m *defaultCommentModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	publicCommentBlogUuidKey := fmt.Sprintf("%s%v", cachePublicCommentBlogUuidPrefix, data.BlogUuid)
	publicCommentIdKey := fmt.Sprintf("%s%v", cachePublicCommentIdPrefix, id)
	publicCommentPostUuidKey := fmt.Sprintf("%s%v", cachePublicCommentPostUuidPrefix, data.PostUuid)
	publicCommentUuidKey := fmt.Sprintf("%s%v", cachePublicCommentUuidPrefix, data.Uuid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicCommentBlogUuidKey, publicCommentIdKey, publicCommentPostUuidKey, publicCommentUuidKey)
	return err
}

func (m *defaultCommentModel) FindOne(ctx context.Context, id int64) (*Comment, error) {
	publicCommentIdKey := fmt.Sprintf("%s%v", cachePublicCommentIdPrefix, id)
	var resp Comment
	err := m.QueryRowCtx(ctx, &resp, publicCommentIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", commentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommentModel) FindOneByBlogUuid(ctx context.Context, blogUuid string) (*Comment, error) {
	publicCommentBlogUuidKey := fmt.Sprintf("%s%v", cachePublicCommentBlogUuidPrefix, blogUuid)
	var resp Comment
	err := m.QueryRowIndexCtx(ctx, &resp, publicCommentBlogUuidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where blog_uuid = $1 limit 1", commentRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, blogUuid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommentModel) FindOneByPostUuid(ctx context.Context, postUuid string) (*Comment, error) {
	publicCommentPostUuidKey := fmt.Sprintf("%s%v", cachePublicCommentPostUuidPrefix, postUuid)
	var resp Comment
	err := m.QueryRowIndexCtx(ctx, &resp, publicCommentPostUuidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where post_uuid = $1 limit 1", commentRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, postUuid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommentModel) FindOneByUuid(ctx context.Context, uuid string) (*Comment, error) {
	publicCommentUuidKey := fmt.Sprintf("%s%v", cachePublicCommentUuidPrefix, uuid)
	var resp Comment
	err := m.QueryRowIndexCtx(ctx, &resp, publicCommentUuidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where uuid = $1 limit 1", commentRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, uuid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommentModel) Insert(ctx context.Context, data *Comment) (sql.Result, error) {
	publicCommentBlogUuidKey := fmt.Sprintf("%s%v", cachePublicCommentBlogUuidPrefix, data.BlogUuid)
	publicCommentIdKey := fmt.Sprintf("%s%v", cachePublicCommentIdPrefix, data.Id)
	publicCommentPostUuidKey := fmt.Sprintf("%s%v", cachePublicCommentPostUuidPrefix, data.PostUuid)
	publicCommentUuidKey := fmt.Sprintf("%s%v", cachePublicCommentUuidPrefix, data.Uuid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8)", m.table, commentRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uuid, data.BlogUuid, data.PostUuid, data.Status, data.Published, data.Updated, data.Selflink, data.Content)
	}, publicCommentBlogUuidKey, publicCommentIdKey, publicCommentPostUuidKey, publicCommentUuidKey)
	return ret, err
}

func (m *defaultCommentModel) Update(ctx context.Context, newData *Comment) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	publicCommentBlogUuidKey := fmt.Sprintf("%s%v", cachePublicCommentBlogUuidPrefix, data.BlogUuid)
	publicCommentIdKey := fmt.Sprintf("%s%v", cachePublicCommentIdPrefix, data.Id)
	publicCommentPostUuidKey := fmt.Sprintf("%s%v", cachePublicCommentPostUuidPrefix, data.PostUuid)
	publicCommentUuidKey := fmt.Sprintf("%s%v", cachePublicCommentUuidPrefix, data.Uuid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, commentRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Id, newData.Uuid, newData.BlogUuid, newData.PostUuid, newData.Status, newData.Published, newData.Updated, newData.Selflink, newData.Content)
	}, publicCommentBlogUuidKey, publicCommentIdKey, publicCommentPostUuidKey, publicCommentUuidKey)
	return err
}

func (m *defaultCommentModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicCommentIdPrefix, primary)
}

func (m *defaultCommentModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", commentRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCommentModel) tableName() string {
	return m.table
}
