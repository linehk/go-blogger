// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/comment/rpc/commentservice/comment_service.go
//
// Generated by this command:
//
//	mockgen -source=./service/comment/rpc/commentservice/comment_service.go -destination=./service/comment/rpc/commentservice/mock_comment_service.go -package=commentservice -self_package=github.com/linehk/go-microservices-blogger/service/comment/rpc/commentservice github.com/linehk/go-microservices-blogger/service/comment/rpc/commentservice
//

// Package commentservice is a generated GoMock package.
package commentservice

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockCommentService is a mock of CommentService interface.
type MockCommentService struct {
	ctrl     *gomock.Controller
	recorder *MockCommentServiceMockRecorder
}

// MockCommentServiceMockRecorder is the mock recorder for MockCommentService.
type MockCommentServiceMockRecorder struct {
	mock *MockCommentService
}

// NewMockCommentService creates a new mock instance.
func NewMockCommentService(ctrl *gomock.Controller) *MockCommentService {
	mock := &MockCommentService{ctrl: ctrl}
	mock.recorder = &MockCommentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentService) EXPECT() *MockCommentServiceMockRecorder {
	return m.recorder
}

// Approve mocks base method.
func (m *MockCommentService) Approve(ctx context.Context, in *ApproveReq, opts ...grpc.CallOption) (*Comment, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Approve", varargs...)
	ret0, _ := ret[0].(*Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Approve indicates an expected call of Approve.
func (mr *MockCommentServiceMockRecorder) Approve(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Approve", reflect.TypeOf((*MockCommentService)(nil).Approve), varargs...)
}

// Delete mocks base method.
func (m *MockCommentService) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*EmptyResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCommentServiceMockRecorder) Delete(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCommentService)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockCommentService) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*Comment, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCommentServiceMockRecorder) Get(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCommentService)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockCommentService) List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*ListResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCommentServiceMockRecorder) List(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCommentService)(nil).List), varargs...)
}

// ListByBlog mocks base method.
func (m *MockCommentService) ListByBlog(ctx context.Context, in *ListByBlogReq, opts ...grpc.CallOption) (*ListByBlogResp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListByBlog", varargs...)
	ret0, _ := ret[0].(*ListByBlogResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByBlog indicates an expected call of ListByBlog.
func (mr *MockCommentServiceMockRecorder) ListByBlog(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByBlog", reflect.TypeOf((*MockCommentService)(nil).ListByBlog), varargs...)
}

// MarkAsSpam mocks base method.
func (m *MockCommentService) MarkAsSpam(ctx context.Context, in *MarkAsSpamReq, opts ...grpc.CallOption) (*Comment, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarkAsSpam", varargs...)
	ret0, _ := ret[0].(*Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkAsSpam indicates an expected call of MarkAsSpam.
func (mr *MockCommentServiceMockRecorder) MarkAsSpam(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsSpam", reflect.TypeOf((*MockCommentService)(nil).MarkAsSpam), varargs...)
}

// RemoveContent mocks base method.
func (m *MockCommentService) RemoveContent(ctx context.Context, in *RemoveContentReq, opts ...grpc.CallOption) (*Comment, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveContent", varargs...)
	ret0, _ := ret[0].(*Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveContent indicates an expected call of RemoveContent.
func (mr *MockCommentServiceMockRecorder) RemoveContent(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveContent", reflect.TypeOf((*MockCommentService)(nil).RemoveContent), varargs...)
}
