// Code generated by goctl. DO NOT EDIT.
// Source: comment.proto

package commentservice

import (
	"context"

	"github.com/linehk/go-blogger/service/comment/rpc/comment"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ApproveReq       = comment.ApproveReq
	Author           = comment.Author
	Blog             = comment.Blog
	Comment          = comment.Comment
	DeleteReq        = comment.DeleteReq
	EmptyResp        = comment.EmptyResp
	GetReq           = comment.GetReq
	Image            = comment.Image
	InReplyTo        = comment.InReplyTo
	ListByBlogReq    = comment.ListByBlogReq
	ListByBlogResp   = comment.ListByBlogResp
	ListReq          = comment.ListReq
	ListResp         = comment.ListResp
	MarkAsSpamReq    = comment.MarkAsSpamReq
	Post             = comment.Post
	RemoveContentReq = comment.RemoveContentReq

	CommentService interface {
		List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error)
		Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*Comment, error)
		Approve(ctx context.Context, in *ApproveReq, opts ...grpc.CallOption) (*Comment, error)
		Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*EmptyResp, error)
		ListByBlog(ctx context.Context, in *ListByBlogReq, opts ...grpc.CallOption) (*ListByBlogResp, error)
		MarkAsSpam(ctx context.Context, in *MarkAsSpamReq, opts ...grpc.CallOption) (*Comment, error)
		RemoveContent(ctx context.Context, in *RemoveContentReq, opts ...grpc.CallOption) (*Comment, error)
	}

	defaultCommentService struct {
		cli zrpc.Client
	}
)

func NewCommentService(cli zrpc.Client) CommentService {
	return &defaultCommentService{
		cli: cli,
	}
}

func (m *defaultCommentService) List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error) {
	client := comment.NewCommentServiceClient(m.cli.Conn())
	return client.List(ctx, in, opts...)
}

func (m *defaultCommentService) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*Comment, error) {
	client := comment.NewCommentServiceClient(m.cli.Conn())
	return client.Get(ctx, in, opts...)
}

func (m *defaultCommentService) Approve(ctx context.Context, in *ApproveReq, opts ...grpc.CallOption) (*Comment, error) {
	client := comment.NewCommentServiceClient(m.cli.Conn())
	return client.Approve(ctx, in, opts...)
}

func (m *defaultCommentService) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := comment.NewCommentServiceClient(m.cli.Conn())
	return client.Delete(ctx, in, opts...)
}

func (m *defaultCommentService) ListByBlog(ctx context.Context, in *ListByBlogReq, opts ...grpc.CallOption) (*ListByBlogResp, error) {
	client := comment.NewCommentServiceClient(m.cli.Conn())
	return client.ListByBlog(ctx, in, opts...)
}

func (m *defaultCommentService) MarkAsSpam(ctx context.Context, in *MarkAsSpamReq, opts ...grpc.CallOption) (*Comment, error) {
	client := comment.NewCommentServiceClient(m.cli.Conn())
	return client.MarkAsSpam(ctx, in, opts...)
}

func (m *defaultCommentService) RemoveContent(ctx context.Context, in *RemoveContentReq, opts ...grpc.CallOption) (*Comment, error) {
	client := comment.NewCommentServiceClient(m.cli.Conn())
	return client.RemoveContent(ctx, in, opts...)
}
