// Code generated by goctl. DO NOT EDIT.
// Source: post.proto

package postservice

import (
	"context"

	"github.com/linehk/go-microservices-blogger/service/post/rpc/post"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Author                = post.Author
	Blog                  = post.Blog
	Comment               = post.Comment
	Comment_Blog          = post.Comment_Blog
	Comment_InReplyTo     = post.Comment_InReplyTo
	Comment_Post          = post.Comment_Post
	DeleteReq             = post.DeleteReq
	EmptyResp             = post.EmptyResp
	GetByPathReq          = post.GetByPathReq
	GetPostUserInfosReq   = post.GetPostUserInfosReq
	GetReq                = post.GetReq
	Image                 = post.Image
	InsertReq             = post.InsertReq
	ListPostUserInfosReq  = post.ListPostUserInfosReq
	ListPostUserInfosResp = post.ListPostUserInfosResp
	ListReq               = post.ListReq
	ListResp              = post.ListResp
	Location              = post.Location
	PatchReq              = post.PatchReq
	Post                  = post.Post
	PostUserInfo          = post.PostUserInfo
	PostUserInfos         = post.PostUserInfos
	PublishReq            = post.PublishReq
	Reply                 = post.Reply
	RevertReq             = post.RevertReq
	SearchReq             = post.SearchReq
	SearchResp            = post.SearchResp
	UpdateReq             = post.UpdateReq

	PostService interface {
		List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error)
		Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*Post, error)
		Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error)
		Insert(ctx context.Context, in *InsertReq, opts ...grpc.CallOption) (*Post, error)
		Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*EmptyResp, error)
		GetByPath(ctx context.Context, in *GetByPathReq, opts ...grpc.CallOption) (*Post, error)
		Patch(ctx context.Context, in *PatchReq, opts ...grpc.CallOption) (*Post, error)
		Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*Post, error)
		Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*Post, error)
		Revert(ctx context.Context, in *RevertReq, opts ...grpc.CallOption) (*Post, error)
		GetPostUserInfos(ctx context.Context, in *GetPostUserInfosReq, opts ...grpc.CallOption) (*PostUserInfos, error)
		ListPostUserInfos(ctx context.Context, in *ListPostUserInfosReq, opts ...grpc.CallOption) (*ListPostUserInfosResp, error)
	}

	defaultPostService struct {
		cli zrpc.Client
	}
)

func NewPostService(cli zrpc.Client) PostService {
	return &defaultPostService{
		cli: cli,
	}
}

func (m *defaultPostService) List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error) {
	client := post.NewPostServiceClient(m.cli.Conn())
	return client.List(ctx, in, opts...)
}

func (m *defaultPostService) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*Post, error) {
	client := post.NewPostServiceClient(m.cli.Conn())
	return client.Get(ctx, in, opts...)
}

func (m *defaultPostService) Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error) {
	client := post.NewPostServiceClient(m.cli.Conn())
	return client.Search(ctx, in, opts...)
}

func (m *defaultPostService) Insert(ctx context.Context, in *InsertReq, opts ...grpc.CallOption) (*Post, error) {
	client := post.NewPostServiceClient(m.cli.Conn())
	return client.Insert(ctx, in, opts...)
}

func (m *defaultPostService) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := post.NewPostServiceClient(m.cli.Conn())
	return client.Delete(ctx, in, opts...)
}

func (m *defaultPostService) GetByPath(ctx context.Context, in *GetByPathReq, opts ...grpc.CallOption) (*Post, error) {
	client := post.NewPostServiceClient(m.cli.Conn())
	return client.GetByPath(ctx, in, opts...)
}

func (m *defaultPostService) Patch(ctx context.Context, in *PatchReq, opts ...grpc.CallOption) (*Post, error) {
	client := post.NewPostServiceClient(m.cli.Conn())
	return client.Patch(ctx, in, opts...)
}

func (m *defaultPostService) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*Post, error) {
	client := post.NewPostServiceClient(m.cli.Conn())
	return client.Update(ctx, in, opts...)
}

func (m *defaultPostService) Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*Post, error) {
	client := post.NewPostServiceClient(m.cli.Conn())
	return client.Publish(ctx, in, opts...)
}

func (m *defaultPostService) Revert(ctx context.Context, in *RevertReq, opts ...grpc.CallOption) (*Post, error) {
	client := post.NewPostServiceClient(m.cli.Conn())
	return client.Revert(ctx, in, opts...)
}

func (m *defaultPostService) GetPostUserInfos(ctx context.Context, in *GetPostUserInfosReq, opts ...grpc.CallOption) (*PostUserInfos, error) {
	client := post.NewPostServiceClient(m.cli.Conn())
	return client.GetPostUserInfos(ctx, in, opts...)
}

func (m *defaultPostService) ListPostUserInfos(ctx context.Context, in *ListPostUserInfosReq, opts ...grpc.CallOption) (*ListPostUserInfosResp, error) {
	client := post.NewPostServiceClient(m.cli.Conn())
	return client.ListPostUserInfos(ctx, in, opts...)
}
