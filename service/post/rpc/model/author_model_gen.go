// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	authorFieldNames          = builder.RawFieldNames(&Author{}, true)
	authorRows                = strings.Join(authorFieldNames, ",")
	authorRowsExpectAutoSet   = strings.Join(stringx.Remove(authorFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	authorRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(authorFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))

	cachePublicAuthorIdPrefix          = "cache:public:author:id:"
	cachePublicAuthorCommentUuidPrefix = "cache:public:author:commentUuid:"
	cachePublicAuthorPageUuidPrefix    = "cache:public:author:pageUuid:"
	cachePublicAuthorPostUuidPrefix    = "cache:public:author:postUuid:"
	cachePublicAuthorUuidPrefix        = "cache:public:author:uuid:"
)

type (
	authorModel interface {
		Insert(ctx context.Context, data *Author) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Author, error)
		FindOneByCommentUuid(ctx context.Context, commentUuid string) (*Author, error)
		FindOneByPageUuid(ctx context.Context, pageUuid string) (*Author, error)
		FindOneByPostUuid(ctx context.Context, postUuid string) (*Author, error)
		FindOneByUuid(ctx context.Context, uuid string) (*Author, error)
		Update(ctx context.Context, data *Author) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAuthorModel struct {
		sqlc.CachedConn
		table string
	}

	Author struct {
		Id          int64          `db:"id"`
		Uuid        string         `db:"uuid"`
		PostUuid    string         `db:"post_uuid"`
		PageUuid    string         `db:"page_uuid"`
		CommentUuid string         `db:"comment_uuid"`
		DisplayName sql.NullString `db:"display_name"`
		Url         sql.NullString `db:"url"`
	}
)

func newAuthorModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAuthorModel {
	return &defaultAuthorModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."author"`,
	}
}

func (m *defaultAuthorModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	publicAuthorCommentUuidKey := fmt.Sprintf("%s%v", cachePublicAuthorCommentUuidPrefix, data.CommentUuid)
	publicAuthorIdKey := fmt.Sprintf("%s%v", cachePublicAuthorIdPrefix, id)
	publicAuthorPageUuidKey := fmt.Sprintf("%s%v", cachePublicAuthorPageUuidPrefix, data.PageUuid)
	publicAuthorPostUuidKey := fmt.Sprintf("%s%v", cachePublicAuthorPostUuidPrefix, data.PostUuid)
	publicAuthorUuidKey := fmt.Sprintf("%s%v", cachePublicAuthorUuidPrefix, data.Uuid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicAuthorCommentUuidKey, publicAuthorIdKey, publicAuthorPageUuidKey, publicAuthorPostUuidKey, publicAuthorUuidKey)
	return err
}

func (m *defaultAuthorModel) FindOne(ctx context.Context, id int64) (*Author, error) {
	publicAuthorIdKey := fmt.Sprintf("%s%v", cachePublicAuthorIdPrefix, id)
	var resp Author
	err := m.QueryRowCtx(ctx, &resp, publicAuthorIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", authorRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAuthorModel) FindOneByCommentUuid(ctx context.Context, commentUuid string) (*Author, error) {
	publicAuthorCommentUuidKey := fmt.Sprintf("%s%v", cachePublicAuthorCommentUuidPrefix, commentUuid)
	var resp Author
	err := m.QueryRowIndexCtx(ctx, &resp, publicAuthorCommentUuidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where comment_uuid = $1 limit 1", authorRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, commentUuid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAuthorModel) FindOneByPageUuid(ctx context.Context, pageUuid string) (*Author, error) {
	publicAuthorPageUuidKey := fmt.Sprintf("%s%v", cachePublicAuthorPageUuidPrefix, pageUuid)
	var resp Author
	err := m.QueryRowIndexCtx(ctx, &resp, publicAuthorPageUuidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where page_uuid = $1 limit 1", authorRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, pageUuid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAuthorModel) FindOneByPostUuid(ctx context.Context, postUuid string) (*Author, error) {
	publicAuthorPostUuidKey := fmt.Sprintf("%s%v", cachePublicAuthorPostUuidPrefix, postUuid)
	var resp Author
	err := m.QueryRowIndexCtx(ctx, &resp, publicAuthorPostUuidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where post_uuid = $1 limit 1", authorRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, postUuid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAuthorModel) FindOneByUuid(ctx context.Context, uuid string) (*Author, error) {
	publicAuthorUuidKey := fmt.Sprintf("%s%v", cachePublicAuthorUuidPrefix, uuid)
	var resp Author
	err := m.QueryRowIndexCtx(ctx, &resp, publicAuthorUuidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where uuid = $1 limit 1", authorRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, uuid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAuthorModel) Insert(ctx context.Context, data *Author) (sql.Result, error) {
	publicAuthorCommentUuidKey := fmt.Sprintf("%s%v", cachePublicAuthorCommentUuidPrefix, data.CommentUuid)
	publicAuthorIdKey := fmt.Sprintf("%s%v", cachePublicAuthorIdPrefix, data.Id)
	publicAuthorPageUuidKey := fmt.Sprintf("%s%v", cachePublicAuthorPageUuidPrefix, data.PageUuid)
	publicAuthorPostUuidKey := fmt.Sprintf("%s%v", cachePublicAuthorPostUuidPrefix, data.PostUuid)
	publicAuthorUuidKey := fmt.Sprintf("%s%v", cachePublicAuthorUuidPrefix, data.Uuid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6)", m.table, authorRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uuid, data.PostUuid, data.PageUuid, data.CommentUuid, data.DisplayName, data.Url)
	}, publicAuthorCommentUuidKey, publicAuthorIdKey, publicAuthorPageUuidKey, publicAuthorPostUuidKey, publicAuthorUuidKey)
	return ret, err
}

func (m *defaultAuthorModel) Update(ctx context.Context, newData *Author) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	publicAuthorCommentUuidKey := fmt.Sprintf("%s%v", cachePublicAuthorCommentUuidPrefix, data.CommentUuid)
	publicAuthorIdKey := fmt.Sprintf("%s%v", cachePublicAuthorIdPrefix, data.Id)
	publicAuthorPageUuidKey := fmt.Sprintf("%s%v", cachePublicAuthorPageUuidPrefix, data.PageUuid)
	publicAuthorPostUuidKey := fmt.Sprintf("%s%v", cachePublicAuthorPostUuidPrefix, data.PostUuid)
	publicAuthorUuidKey := fmt.Sprintf("%s%v", cachePublicAuthorUuidPrefix, data.Uuid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, authorRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Id, newData.Uuid, newData.PostUuid, newData.PageUuid, newData.CommentUuid, newData.DisplayName, newData.Url)
	}, publicAuthorCommentUuidKey, publicAuthorIdKey, publicAuthorPageUuidKey, publicAuthorPostUuidKey, publicAuthorUuidKey)
	return err
}

func (m *defaultAuthorModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicAuthorIdPrefix, primary)
}

func (m *defaultAuthorModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", authorRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAuthorModel) tableName() string {
	return m.table
}
