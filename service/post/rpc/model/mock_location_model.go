// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/linehk/go-microservices-blogger/service/post/rpc/model (interfaces: LocationModel)
//
// Generated by this command:
//
//	mockgen -destination=./mock_location_model.go -package=model -self_package=github.com/linehk/go-microservices-blogger/service/post/rpc/model github.com/linehk/go-microservices-blogger/service/post/rpc/model LocationModel
//

// Package model is a generated GoMock package.
package model

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLocationModel is a mock of LocationModel interface.
type MockLocationModel struct {
	ctrl     *gomock.Controller
	recorder *MockLocationModelMockRecorder
}

// MockLocationModelMockRecorder is the mock recorder for MockLocationModel.
type MockLocationModelMockRecorder struct {
	mock *MockLocationModel
}

// NewMockLocationModel creates a new mock instance.
func NewMockLocationModel(ctrl *gomock.Controller) *MockLocationModel {
	mock := &MockLocationModel{ctrl: ctrl}
	mock.recorder = &MockLocationModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocationModel) EXPECT() *MockLocationModelMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockLocationModel) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockLocationModelMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLocationModel)(nil).Delete), arg0, arg1)
}

// FindOne mocks base method.
func (m *MockLocationModel) FindOne(arg0 context.Context, arg1 int64) (*Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0, arg1)
	ret0, _ := ret[0].(*Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockLocationModelMockRecorder) FindOne(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockLocationModel)(nil).FindOne), arg0, arg1)
}

// FindOneByPostUuid mocks base method.
func (m *MockLocationModel) FindOneByPostUuid(arg0 context.Context, arg1 string) (*Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByPostUuid", arg0, arg1)
	ret0, _ := ret[0].(*Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByPostUuid indicates an expected call of FindOneByPostUuid.
func (mr *MockLocationModelMockRecorder) FindOneByPostUuid(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByPostUuid", reflect.TypeOf((*MockLocationModel)(nil).FindOneByPostUuid), arg0, arg1)
}

// FindOneByUuid mocks base method.
func (m *MockLocationModel) FindOneByUuid(arg0 context.Context, arg1 string) (*Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByUuid", arg0, arg1)
	ret0, _ := ret[0].(*Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByUuid indicates an expected call of FindOneByUuid.
func (mr *MockLocationModelMockRecorder) FindOneByUuid(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByUuid", reflect.TypeOf((*MockLocationModel)(nil).FindOneByUuid), arg0, arg1)
}

// Insert mocks base method.
func (m *MockLocationModel) Insert(arg0 context.Context, arg1 *Location) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockLocationModelMockRecorder) Insert(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockLocationModel)(nil).Insert), arg0, arg1)
}

// Update mocks base method.
func (m *MockLocationModel) Update(arg0 context.Context, arg1 *Location) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockLocationModelMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLocationModel)(nil).Update), arg0, arg1)
}
