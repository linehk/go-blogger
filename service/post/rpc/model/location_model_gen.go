// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	locationFieldNames          = builder.RawFieldNames(&Location{}, true)
	locationRows                = strings.Join(locationFieldNames, ",")
	locationRowsExpectAutoSet   = strings.Join(stringx.Remove(locationFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	locationRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(locationFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))

	cachePublicLocationIdPrefix       = "cache:public:location:id:"
	cachePublicLocationPostUuidPrefix = "cache:public:location:postUuid:"
	cachePublicLocationUuidPrefix     = "cache:public:location:uuid:"
)

type (
	locationModel interface {
		Insert(ctx context.Context, data *Location) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Location, error)
		FindOneByPostUuid(ctx context.Context, postUuid string) (*Location, error)
		FindOneByUuid(ctx context.Context, uuid string) (*Location, error)
		Update(ctx context.Context, data *Location) error
		Delete(ctx context.Context, id int64) error
	}

	defaultLocationModel struct {
		sqlc.CachedConn
		table string
	}

	Location struct {
		Id       int64           `db:"id"`
		Uuid     string          `db:"uuid"`
		PostUuid string          `db:"post_uuid"`
		Name     sql.NullString  `db:"name"`
		Lat      sql.NullFloat64 `db:"lat"`
		Lng      sql.NullFloat64 `db:"lng"`
		Span     sql.NullString  `db:"span"`
	}
)

func newLocationModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultLocationModel {
	return &defaultLocationModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."location"`,
	}
}

func (m *defaultLocationModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	publicLocationIdKey := fmt.Sprintf("%s%v", cachePublicLocationIdPrefix, id)
	publicLocationPostUuidKey := fmt.Sprintf("%s%v", cachePublicLocationPostUuidPrefix, data.PostUuid)
	publicLocationUuidKey := fmt.Sprintf("%s%v", cachePublicLocationUuidPrefix, data.Uuid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicLocationIdKey, publicLocationPostUuidKey, publicLocationUuidKey)
	return err
}

func (m *defaultLocationModel) FindOne(ctx context.Context, id int64) (*Location, error) {
	publicLocationIdKey := fmt.Sprintf("%s%v", cachePublicLocationIdPrefix, id)
	var resp Location
	err := m.QueryRowCtx(ctx, &resp, publicLocationIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", locationRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLocationModel) FindOneByPostUuid(ctx context.Context, postUuid string) (*Location, error) {
	publicLocationPostUuidKey := fmt.Sprintf("%s%v", cachePublicLocationPostUuidPrefix, postUuid)
	var resp Location
	err := m.QueryRowIndexCtx(ctx, &resp, publicLocationPostUuidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where post_uuid = $1 limit 1", locationRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, postUuid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLocationModel) FindOneByUuid(ctx context.Context, uuid string) (*Location, error) {
	publicLocationUuidKey := fmt.Sprintf("%s%v", cachePublicLocationUuidPrefix, uuid)
	var resp Location
	err := m.QueryRowIndexCtx(ctx, &resp, publicLocationUuidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where uuid = $1 limit 1", locationRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, uuid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLocationModel) Insert(ctx context.Context, data *Location) (sql.Result, error) {
	publicLocationIdKey := fmt.Sprintf("%s%v", cachePublicLocationIdPrefix, data.Id)
	publicLocationPostUuidKey := fmt.Sprintf("%s%v", cachePublicLocationPostUuidPrefix, data.PostUuid)
	publicLocationUuidKey := fmt.Sprintf("%s%v", cachePublicLocationUuidPrefix, data.Uuid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6)", m.table, locationRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uuid, data.PostUuid, data.Name, data.Lat, data.Lng, data.Span)
	}, publicLocationIdKey, publicLocationPostUuidKey, publicLocationUuidKey)
	return ret, err
}

func (m *defaultLocationModel) Update(ctx context.Context, newData *Location) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	publicLocationIdKey := fmt.Sprintf("%s%v", cachePublicLocationIdPrefix, data.Id)
	publicLocationPostUuidKey := fmt.Sprintf("%s%v", cachePublicLocationPostUuidPrefix, data.PostUuid)
	publicLocationUuidKey := fmt.Sprintf("%s%v", cachePublicLocationUuidPrefix, data.Uuid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, locationRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Id, newData.Uuid, newData.PostUuid, newData.Name, newData.Lat, newData.Lng, newData.Span)
	}, publicLocationIdKey, publicLocationPostUuidKey, publicLocationUuidKey)
	return err
}

func (m *defaultLocationModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicLocationIdPrefix, primary)
}

func (m *defaultLocationModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", locationRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLocationModel) tableName() string {
	return m.table
}
