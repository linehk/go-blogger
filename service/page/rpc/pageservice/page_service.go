// Code generated by goctl. DO NOT EDIT.
// Source: page.proto

package pageservice

import (
	"context"

	"github.com/linehk/go-microservices-blogger/service/page/rpc/page"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Author    = page.Author
	Blog      = page.Blog
	DeleteReq = page.DeleteReq
	EmptyResp = page.EmptyResp
	GetReq    = page.GetReq
	Image     = page.Image
	InsertReq = page.InsertReq
	ListReq   = page.ListReq
	ListResp  = page.ListResp
	Page      = page.Page
	PatchReq  = page.PatchReq
	UpdateReq = page.UpdateReq

	PageService interface {
		List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error)
		Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*Page, error)
		Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*EmptyResp, error)
		Insert(ctx context.Context, in *InsertReq, opts ...grpc.CallOption) (*Page, error)
		Patch(ctx context.Context, in *PatchReq, opts ...grpc.CallOption) (*Page, error)
		Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*Page, error)
	}

	defaultPageService struct {
		cli zrpc.Client
	}
)

func NewPageService(cli zrpc.Client) PageService {
	return &defaultPageService{
		cli: cli,
	}
}

func (m *defaultPageService) List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error) {
	client := page.NewPageServiceClient(m.cli.Conn())
	return client.List(ctx, in, opts...)
}

func (m *defaultPageService) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*Page, error) {
	client := page.NewPageServiceClient(m.cli.Conn())
	return client.Get(ctx, in, opts...)
}

func (m *defaultPageService) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := page.NewPageServiceClient(m.cli.Conn())
	return client.Delete(ctx, in, opts...)
}

func (m *defaultPageService) Insert(ctx context.Context, in *InsertReq, opts ...grpc.CallOption) (*Page, error) {
	client := page.NewPageServiceClient(m.cli.Conn())
	return client.Insert(ctx, in, opts...)
}

func (m *defaultPageService) Patch(ctx context.Context, in *PatchReq, opts ...grpc.CallOption) (*Page, error) {
	client := page.NewPageServiceClient(m.cli.Conn())
	return client.Patch(ctx, in, opts...)
}

func (m *defaultPageService) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*Page, error) {
	client := page.NewPageServiceClient(m.cli.Conn())
	return client.Update(ctx, in, opts...)
}
