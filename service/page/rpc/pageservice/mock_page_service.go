// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/page/rpc/pageservice/page_service.go
//
// Generated by this command:
//
//	mockgen -source=./service/page/rpc/pageservice/page_service.go -destination=./service/page/rpc/pageservice/mock_page_service.go -package=pageservice -self_package=github.com/linehk/go-microservices-blogger/service/page/rpc/pageservice github.com/linehk/go-microservices-blogger/service/page/rpc/pageservice
//

// Package pageservice is a generated GoMock package.
package pageservice

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPageService is a mock of PageService interface.
type MockPageService struct {
	ctrl     *gomock.Controller
	recorder *MockPageServiceMockRecorder
}

// MockPageServiceMockRecorder is the mock recorder for MockPageService.
type MockPageServiceMockRecorder struct {
	mock *MockPageService
}

// NewMockPageService creates a new mock instance.
func NewMockPageService(ctrl *gomock.Controller) *MockPageService {
	mock := &MockPageService{ctrl: ctrl}
	mock.recorder = &MockPageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPageService) EXPECT() *MockPageServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockPageService) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*EmptyResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPageServiceMockRecorder) Delete(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPageService)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockPageService) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*Page, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPageServiceMockRecorder) Get(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPageService)(nil).Get), varargs...)
}

// Insert mocks base method.
func (m *MockPageService) Insert(ctx context.Context, in *InsertReq, opts ...grpc.CallOption) (*Page, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Insert", varargs...)
	ret0, _ := ret[0].(*Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockPageServiceMockRecorder) Insert(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockPageService)(nil).Insert), varargs...)
}

// List mocks base method.
func (m *MockPageService) List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*ListResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPageServiceMockRecorder) List(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPageService)(nil).List), varargs...)
}

// Patch mocks base method.
func (m *MockPageService) Patch(ctx context.Context, in *PatchReq, opts ...grpc.CallOption) (*Page, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockPageServiceMockRecorder) Patch(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockPageService)(nil).Patch), varargs...)
}

// Update mocks base method.
func (m *MockPageService) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*Page, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPageServiceMockRecorder) Update(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPageService)(nil).Update), varargs...)
}
