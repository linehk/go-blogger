// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pageFieldNames          = builder.RawFieldNames(&Page{}, true)
	pageRows                = strings.Join(pageFieldNames, ",")
	pageRowsExpectAutoSet   = strings.Join(stringx.Remove(pageFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	pageRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(pageFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))

	cachePublicPageIdPrefix       = "cache:public:page:id:"
	cachePublicPageBlogUuidPrefix = "cache:public:page:blogUuid:"
	cachePublicPageUuidPrefix     = "cache:public:page:uuid:"
)

type (
	pageModel interface {
		Insert(ctx context.Context, data *Page) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Page, error)
		FindOneByBlogUuid(ctx context.Context, blogUuid string) (*Page, error)
		FindOneByUuid(ctx context.Context, uuid string) (*Page, error)
		Update(ctx context.Context, data *Page) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPageModel struct {
		sqlc.CachedConn
		table string
	}

	Page struct {
		Id        int64          `db:"id"`
		Uuid      string         `db:"uuid"`
		BlogUuid  string         `db:"blog_uuid"`
		Status    sql.NullString `db:"status"`
		Published sql.NullTime   `db:"published"`
		Updated   sql.NullTime   `db:"updated"`
		Url       sql.NullString `db:"url"`
		Selflink  sql.NullString `db:"selflink"`
		Title     sql.NullString `db:"title"`
		Content   sql.NullString `db:"content"`
	}
)

func newPageModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultPageModel {
	return &defaultPageModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."page"`,
	}
}

func (m *defaultPageModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	publicPageBlogUuidKey := fmt.Sprintf("%s%v", cachePublicPageBlogUuidPrefix, data.BlogUuid)
	publicPageIdKey := fmt.Sprintf("%s%v", cachePublicPageIdPrefix, id)
	publicPageUuidKey := fmt.Sprintf("%s%v", cachePublicPageUuidPrefix, data.Uuid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicPageBlogUuidKey, publicPageIdKey, publicPageUuidKey)
	return err
}

func (m *defaultPageModel) FindOne(ctx context.Context, id int64) (*Page, error) {
	publicPageIdKey := fmt.Sprintf("%s%v", cachePublicPageIdPrefix, id)
	var resp Page
	err := m.QueryRowCtx(ctx, &resp, publicPageIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", pageRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPageModel) FindOneByBlogUuid(ctx context.Context, blogUuid string) (*Page, error) {
	publicPageBlogUuidKey := fmt.Sprintf("%s%v", cachePublicPageBlogUuidPrefix, blogUuid)
	var resp Page
	err := m.QueryRowIndexCtx(ctx, &resp, publicPageBlogUuidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where blog_uuid = $1 limit 1", pageRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, blogUuid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPageModel) FindOneByUuid(ctx context.Context, uuid string) (*Page, error) {
	publicPageUuidKey := fmt.Sprintf("%s%v", cachePublicPageUuidPrefix, uuid)
	var resp Page
	err := m.QueryRowIndexCtx(ctx, &resp, publicPageUuidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where uuid = $1 limit 1", pageRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, uuid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPageModel) Insert(ctx context.Context, data *Page) (sql.Result, error) {
	publicPageBlogUuidKey := fmt.Sprintf("%s%v", cachePublicPageBlogUuidPrefix, data.BlogUuid)
	publicPageIdKey := fmt.Sprintf("%s%v", cachePublicPageIdPrefix, data.Id)
	publicPageUuidKey := fmt.Sprintf("%s%v", cachePublicPageUuidPrefix, data.Uuid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9)", m.table, pageRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uuid, data.BlogUuid, data.Status, data.Published, data.Updated, data.Url, data.Selflink, data.Title, data.Content)
	}, publicPageBlogUuidKey, publicPageIdKey, publicPageUuidKey)
	return ret, err
}

func (m *defaultPageModel) Update(ctx context.Context, newData *Page) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	publicPageBlogUuidKey := fmt.Sprintf("%s%v", cachePublicPageBlogUuidPrefix, data.BlogUuid)
	publicPageIdKey := fmt.Sprintf("%s%v", cachePublicPageIdPrefix, data.Id)
	publicPageUuidKey := fmt.Sprintf("%s%v", cachePublicPageUuidPrefix, data.Uuid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, pageRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Id, newData.Uuid, newData.BlogUuid, newData.Status, newData.Published, newData.Updated, newData.Url, newData.Selflink, newData.Title, newData.Content)
	}, publicPageBlogUuidKey, publicPageIdKey, publicPageUuidKey)
	return err
}

func (m *defaultPageModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicPageIdPrefix, primary)
}

func (m *defaultPageModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", pageRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPageModel) tableName() string {
	return m.table
}
