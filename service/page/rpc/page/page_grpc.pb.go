// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: service/page/rpc/page.proto

package page

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PageService_List_FullMethodName   = "/page.PageService/List"
	PageService_Get_FullMethodName    = "/page.PageService/Get"
	PageService_Delete_FullMethodName = "/page.PageService/Delete"
	PageService_Insert_FullMethodName = "/page.PageService/Insert"
	PageService_Patch_FullMethodName  = "/page.PageService/Patch"
	PageService_Update_FullMethodName = "/page.PageService/Update"
)

// PageServiceClient is the client API for PageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PageServiceClient interface {
	List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error)
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*Page, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*EmptyResp, error)
	Insert(ctx context.Context, in *InsertReq, opts ...grpc.CallOption) (*Page, error)
	Patch(ctx context.Context, in *PatchReq, opts ...grpc.CallOption) (*Page, error)
	Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*Page, error)
}

type pageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPageServiceClient(cc grpc.ClientConnInterface) PageServiceClient {
	return &pageServiceClient{cc}
}

func (c *pageServiceClient) List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error) {
	out := new(ListResp)
	err := c.cc.Invoke(ctx, PageService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageServiceClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, PageService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageServiceClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, PageService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageServiceClient) Insert(ctx context.Context, in *InsertReq, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, PageService_Insert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageServiceClient) Patch(ctx context.Context, in *PatchReq, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, PageService_Patch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageServiceClient) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, PageService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PageServiceServer is the server API for PageService service.
// All implementations must embed UnimplementedPageServiceServer
// for forward compatibility
type PageServiceServer interface {
	List(context.Context, *ListReq) (*ListResp, error)
	Get(context.Context, *GetReq) (*Page, error)
	Delete(context.Context, *DeleteReq) (*EmptyResp, error)
	Insert(context.Context, *InsertReq) (*Page, error)
	Patch(context.Context, *PatchReq) (*Page, error)
	Update(context.Context, *UpdateReq) (*Page, error)
	mustEmbedUnimplementedPageServiceServer()
}

// UnimplementedPageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPageServiceServer struct {
}

func (UnimplementedPageServiceServer) List(context.Context, *ListReq) (*ListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPageServiceServer) Get(context.Context, *GetReq) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPageServiceServer) Delete(context.Context, *DeleteReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPageServiceServer) Insert(context.Context, *InsertReq) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedPageServiceServer) Patch(context.Context, *PatchReq) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Patch not implemented")
}
func (UnimplementedPageServiceServer) Update(context.Context, *UpdateReq) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPageServiceServer) mustEmbedUnimplementedPageServiceServer() {}

// UnsafePageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PageServiceServer will
// result in compilation errors.
type UnsafePageServiceServer interface {
	mustEmbedUnimplementedPageServiceServer()
}

func RegisterPageServiceServer(s grpc.ServiceRegistrar, srv PageServiceServer) {
	s.RegisterService(&PageService_ServiceDesc, srv)
}

func _PageService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageServiceServer).List(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageServiceServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageServiceServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageService_Insert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageServiceServer).Insert(ctx, req.(*InsertReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageService_Patch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageServiceServer).Patch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageService_Patch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageServiceServer).Patch(ctx, req.(*PatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageServiceServer).Update(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PageService_ServiceDesc is the grpc.ServiceDesc for PageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "page.PageService",
	HandlerType: (*PageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _PageService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PageService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PageService_Delete_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _PageService_Insert_Handler,
		},
		{
			MethodName: "Patch",
			Handler:    _PageService_Patch_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PageService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/page/rpc/page.proto",
}
