// Code generated by goctl. DO NOT EDIT.
// Source: page.proto

package server

import (
	"context"

	"github.com/linehk/go-blogger/service/page/rpc/internal/logic"
	"github.com/linehk/go-blogger/service/page/rpc/internal/svc"
	"github.com/linehk/go-blogger/service/page/rpc/page"
)

type PageServiceServer struct {
	svcCtx *svc.ServiceContext
	page.UnimplementedPageServiceServer
}

func NewPageServiceServer(svcCtx *svc.ServiceContext) *PageServiceServer {
	return &PageServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *PageServiceServer) List(ctx context.Context, in *page.ListReq) (*page.ListResp, error) {
	l := logic.NewListLogic(ctx, s.svcCtx)
	return l.List(in)
}

func (s *PageServiceServer) Get(ctx context.Context, in *page.GetReq) (*page.Page, error) {
	l := logic.NewGetLogic(ctx, s.svcCtx)
	return l.Get(in)
}

func (s *PageServiceServer) Delete(ctx context.Context, in *page.DeleteReq) (*page.EmptyResp, error) {
	l := logic.NewDeleteLogic(ctx, s.svcCtx)
	return l.Delete(in)
}

func (s *PageServiceServer) Insert(ctx context.Context, in *page.InsertReq) (*page.Page, error) {
	l := logic.NewInsertLogic(ctx, s.svcCtx)
	return l.Insert(in)
}

func (s *PageServiceServer) Patch(ctx context.Context, in *page.PatchReq) (*page.Page, error) {
	l := logic.NewPatchLogic(ctx, s.svcCtx)
	return l.Patch(in)
}

func (s *PageServiceServer) Update(ctx context.Context, in *page.UpdateReq) (*page.Page, error) {
	l := logic.NewUpdateLogic(ctx, s.svcCtx)
	return l.Update(in)
}
