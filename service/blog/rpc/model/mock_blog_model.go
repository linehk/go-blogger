// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/linehk/go-microservices-blogger/service/blog/rpc/model (interfaces: BlogModel)
//
// Generated by this command:
//
//	mockgen -destination=./mock_blog_model.go -package=model -self_package=github.com/linehk/go-microservices-blogger/service/blog/rpc/model github.com/linehk/go-microservices-blogger/service/blog/rpc/model BlogModel
//

// Package model is a generated GoMock package.
package model

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBlogModel is a mock of BlogModel interface.
type MockBlogModel struct {
	ctrl     *gomock.Controller
	recorder *MockBlogModelMockRecorder
}

// MockBlogModelMockRecorder is the mock recorder for MockBlogModel.
type MockBlogModelMockRecorder struct {
	mock *MockBlogModel
}

// NewMockBlogModel creates a new mock instance.
func NewMockBlogModel(ctrl *gomock.Controller) *MockBlogModel {
	mock := &MockBlogModel{ctrl: ctrl}
	mock.recorder = &MockBlogModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlogModel) EXPECT() *MockBlogModelMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockBlogModel) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBlogModelMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBlogModel)(nil).Delete), arg0, arg1)
}

// FindOne mocks base method.
func (m *MockBlogModel) FindOne(arg0 context.Context, arg1 int64) (*Blog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0, arg1)
	ret0, _ := ret[0].(*Blog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockBlogModelMockRecorder) FindOne(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockBlogModel)(nil).FindOne), arg0, arg1)
}

// FindOneByAppUserUuid mocks base method.
func (m *MockBlogModel) FindOneByAppUserUuid(arg0 context.Context, arg1 string) (*Blog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByAppUserUuid", arg0, arg1)
	ret0, _ := ret[0].(*Blog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByAppUserUuid indicates an expected call of FindOneByAppUserUuid.
func (mr *MockBlogModelMockRecorder) FindOneByAppUserUuid(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByAppUserUuid", reflect.TypeOf((*MockBlogModel)(nil).FindOneByAppUserUuid), arg0, arg1)
}

// FindOneByUrl mocks base method.
func (m *MockBlogModel) FindOneByUrl(arg0 context.Context, arg1 string) (*Blog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByUrl", arg0, arg1)
	ret0, _ := ret[0].(*Blog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByUrl indicates an expected call of FindOneByUrl.
func (mr *MockBlogModelMockRecorder) FindOneByUrl(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByUrl", reflect.TypeOf((*MockBlogModel)(nil).FindOneByUrl), arg0, arg1)
}

// FindOneByUuid mocks base method.
func (m *MockBlogModel) FindOneByUuid(arg0 context.Context, arg1 string) (*Blog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByUuid", arg0, arg1)
	ret0, _ := ret[0].(*Blog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByUuid indicates an expected call of FindOneByUuid.
func (mr *MockBlogModelMockRecorder) FindOneByUuid(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByUuid", reflect.TypeOf((*MockBlogModel)(nil).FindOneByUuid), arg0, arg1)
}

// Insert mocks base method.
func (m *MockBlogModel) Insert(arg0 context.Context, arg1 *Blog) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockBlogModelMockRecorder) Insert(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockBlogModel)(nil).Insert), arg0, arg1)
}

// Update mocks base method.
func (m *MockBlogModel) Update(arg0 context.Context, arg1 *Blog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBlogModelMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBlogModel)(nil).Update), arg0, arg1)
}
