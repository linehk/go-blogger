// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/linehk/go-microservices-blogger/service/user/rpc/model (interfaces: AppUserModel)
//
// Generated by this command:
//
//	mockgen -destination=./mock_app_user_model.go -package=model -self_package=github.com/linehk/go-microservices-blogger/service/user/rpc/model github.com/linehk/go-microservices-blogger/service/user/rpc/model AppUserModel
//

// Package model is a generated GoMock package.
package model

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAppUserModel is a mock of AppUserModel interface.
type MockAppUserModel struct {
	ctrl     *gomock.Controller
	recorder *MockAppUserModelMockRecorder
}

// MockAppUserModelMockRecorder is the mock recorder for MockAppUserModel.
type MockAppUserModelMockRecorder struct {
	mock *MockAppUserModel
}

// NewMockAppUserModel creates a new mock instance.
func NewMockAppUserModel(ctrl *gomock.Controller) *MockAppUserModel {
	mock := &MockAppUserModel{ctrl: ctrl}
	mock.recorder = &MockAppUserModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppUserModel) EXPECT() *MockAppUserModelMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockAppUserModel) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAppUserModelMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAppUserModel)(nil).Delete), arg0, arg1)
}

// FindOne mocks base method.
func (m *MockAppUserModel) FindOne(arg0 context.Context, arg1 int64) (*AppUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0, arg1)
	ret0, _ := ret[0].(*AppUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockAppUserModelMockRecorder) FindOne(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockAppUserModel)(nil).FindOne), arg0, arg1)
}

// FindOneByUuid mocks base method.
func (m *MockAppUserModel) FindOneByUuid(arg0 context.Context, arg1 string) (*AppUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByUuid", arg0, arg1)
	ret0, _ := ret[0].(*AppUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByUuid indicates an expected call of FindOneByUuid.
func (mr *MockAppUserModelMockRecorder) FindOneByUuid(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByUuid", reflect.TypeOf((*MockAppUserModel)(nil).FindOneByUuid), arg0, arg1)
}

// Insert mocks base method.
func (m *MockAppUserModel) Insert(arg0 context.Context, arg1 *AppUser) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockAppUserModelMockRecorder) Insert(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockAppUserModel)(nil).Insert), arg0, arg1)
}

// Update mocks base method.
func (m *MockAppUserModel) Update(arg0 context.Context, arg1 *AppUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAppUserModelMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAppUserModel)(nil).Update), arg0, arg1)
}
