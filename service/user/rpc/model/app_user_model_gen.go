// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	appUserFieldNames          = builder.RawFieldNames(&AppUser{}, true)
	appUserRows                = strings.Join(appUserFieldNames, ",")
	appUserRowsExpectAutoSet   = strings.Join(stringx.Remove(appUserFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	appUserRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(appUserFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))

	cachePublicAppUserIdPrefix   = "cache:public:appUser:id:"
	cachePublicAppUserUuidPrefix = "cache:public:appUser:uuid:"
)

type (
	appUserModel interface {
		Insert(ctx context.Context, data *AppUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AppUser, error)
		FindOneByUuid(ctx context.Context, uuid string) (*AppUser, error)
		Update(ctx context.Context, data *AppUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAppUserModel struct {
		sqlc.CachedConn
		table string
	}

	AppUser struct {
		Id          int64          `db:"id"`
		Uuid        string         `db:"uuid"`
		Created     sql.NullTime   `db:"created"`
		Url         sql.NullString `db:"url"`
		SelfLink    sql.NullString `db:"self_link"`
		DisplayName sql.NullString `db:"display_name"`
		About       sql.NullString `db:"about"`
		Language    sql.NullString `db:"language"`
		Country     sql.NullString `db:"country"`
		Variant     sql.NullString `db:"variant"`
	}
)

func newAppUserModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAppUserModel {
	return &defaultAppUserModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."app_user"`,
	}
}

func (m *defaultAppUserModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	publicAppUserIdKey := fmt.Sprintf("%s%v", cachePublicAppUserIdPrefix, id)
	publicAppUserUuidKey := fmt.Sprintf("%s%v", cachePublicAppUserUuidPrefix, data.Uuid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicAppUserIdKey, publicAppUserUuidKey)
	return err
}

func (m *defaultAppUserModel) FindOne(ctx context.Context, id int64) (*AppUser, error) {
	publicAppUserIdKey := fmt.Sprintf("%s%v", cachePublicAppUserIdPrefix, id)
	var resp AppUser
	err := m.QueryRowCtx(ctx, &resp, publicAppUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", appUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppUserModel) FindOneByUuid(ctx context.Context, uuid string) (*AppUser, error) {
	publicAppUserUuidKey := fmt.Sprintf("%s%v", cachePublicAppUserUuidPrefix, uuid)
	var resp AppUser
	err := m.QueryRowIndexCtx(ctx, &resp, publicAppUserUuidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where uuid = $1 limit 1", appUserRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, uuid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppUserModel) Insert(ctx context.Context, data *AppUser) (sql.Result, error) {
	publicAppUserIdKey := fmt.Sprintf("%s%v", cachePublicAppUserIdPrefix, data.Id)
	publicAppUserUuidKey := fmt.Sprintf("%s%v", cachePublicAppUserUuidPrefix, data.Uuid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9)", m.table, appUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uuid, data.Created, data.Url, data.SelfLink, data.DisplayName, data.About, data.Language, data.Country, data.Variant)
	}, publicAppUserIdKey, publicAppUserUuidKey)
	return ret, err
}

func (m *defaultAppUserModel) Update(ctx context.Context, newData *AppUser) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	publicAppUserIdKey := fmt.Sprintf("%s%v", cachePublicAppUserIdPrefix, data.Id)
	publicAppUserUuidKey := fmt.Sprintf("%s%v", cachePublicAppUserUuidPrefix, data.Uuid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, appUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Id, newData.Uuid, newData.Created, newData.Url, newData.SelfLink, newData.DisplayName, newData.About, newData.Language, newData.Country, newData.Variant)
	}, publicAppUserIdKey, publicAppUserUuidKey)
	return err
}

func (m *defaultAppUserModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicAppUserIdPrefix, primary)
}

func (m *defaultAppUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", appUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAppUserModel) tableName() string {
	return m.table
}
