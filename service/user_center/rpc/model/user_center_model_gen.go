// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userCenterFieldNames          = builder.RawFieldNames(&UserCenter{}, true)
	userCenterRows                = strings.Join(userCenterFieldNames, ",")
	userCenterRowsExpectAutoSet   = strings.Join(stringx.Remove(userCenterFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	userCenterRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(userCenterFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))

	cachePublicUserCenterIdPrefix       = "cache:public:userCenter:id:"
	cachePublicUserCenterEmailPrefix    = "cache:public:userCenter:email:"
	cachePublicUserCenterUsernamePrefix = "cache:public:userCenter:username:"
)

type (
	userCenterModel interface {
		Insert(ctx context.Context, data *UserCenter) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserCenter, error)
		FindOneByEmail(ctx context.Context, email string) (*UserCenter, error)
		FindOneByUsername(ctx context.Context, username string) (*UserCenter, error)
		Update(ctx context.Context, data *UserCenter) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserCenterModel struct {
		sqlc.CachedConn
		table string
	}

	UserCenter struct {
		Id       int64  `db:"id"`
		Username string `db:"username"`
		Password string `db:"password"`
		Email    string `db:"email"`
	}
)

func newUserCenterModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserCenterModel {
	return &defaultUserCenterModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."user_center"`,
	}
}

func (m *defaultUserCenterModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	publicUserCenterEmailKey := fmt.Sprintf("%s%v", cachePublicUserCenterEmailPrefix, data.Email)
	publicUserCenterIdKey := fmt.Sprintf("%s%v", cachePublicUserCenterIdPrefix, id)
	publicUserCenterUsernameKey := fmt.Sprintf("%s%v", cachePublicUserCenterUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicUserCenterEmailKey, publicUserCenterIdKey, publicUserCenterUsernameKey)
	return err
}

func (m *defaultUserCenterModel) FindOne(ctx context.Context, id int64) (*UserCenter, error) {
	publicUserCenterIdKey := fmt.Sprintf("%s%v", cachePublicUserCenterIdPrefix, id)
	var resp UserCenter
	err := m.QueryRowCtx(ctx, &resp, publicUserCenterIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", userCenterRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserCenterModel) FindOneByEmail(ctx context.Context, email string) (*UserCenter, error) {
	publicUserCenterEmailKey := fmt.Sprintf("%s%v", cachePublicUserCenterEmailPrefix, email)
	var resp UserCenter
	err := m.QueryRowIndexCtx(ctx, &resp, publicUserCenterEmailKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where email = $1 limit 1", userCenterRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, email); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserCenterModel) FindOneByUsername(ctx context.Context, username string) (*UserCenter, error) {
	publicUserCenterUsernameKey := fmt.Sprintf("%s%v", cachePublicUserCenterUsernamePrefix, username)
	var resp UserCenter
	err := m.QueryRowIndexCtx(ctx, &resp, publicUserCenterUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where username = $1 limit 1", userCenterRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserCenterModel) Insert(ctx context.Context, data *UserCenter) (sql.Result, error) {
	publicUserCenterEmailKey := fmt.Sprintf("%s%v", cachePublicUserCenterEmailPrefix, data.Email)
	publicUserCenterIdKey := fmt.Sprintf("%s%v", cachePublicUserCenterIdPrefix, data.Id)
	publicUserCenterUsernameKey := fmt.Sprintf("%s%v", cachePublicUserCenterUsernamePrefix, data.Username)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3)", m.table, userCenterRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Username, data.Password, data.Email)
	}, publicUserCenterEmailKey, publicUserCenterIdKey, publicUserCenterUsernameKey)
	return ret, err
}

func (m *defaultUserCenterModel) Update(ctx context.Context, newData *UserCenter) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	publicUserCenterEmailKey := fmt.Sprintf("%s%v", cachePublicUserCenterEmailPrefix, data.Email)
	publicUserCenterIdKey := fmt.Sprintf("%s%v", cachePublicUserCenterIdPrefix, data.Id)
	publicUserCenterUsernameKey := fmt.Sprintf("%s%v", cachePublicUserCenterUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, userCenterRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Id, newData.Username, newData.Password, newData.Email)
	}, publicUserCenterEmailKey, publicUserCenterIdKey, publicUserCenterUsernameKey)
	return err
}

func (m *defaultUserCenterModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicUserCenterIdPrefix, primary)
}

func (m *defaultUserCenterModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", userCenterRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserCenterModel) tableName() string {
	return m.table
}
